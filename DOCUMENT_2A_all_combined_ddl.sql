/* USER SQL STATEMENTS */

/*ADMIN TABLE*/
DROP TABLE PKANAKI.ADMIN;
CREATE TABLE PKANAKI.ADMIN
( 
    ADMINID VARCHAR2(100) NOT NULL,
	PASSWORD VARCHAR2(100) NOT NULL,
    PRIMARY KEY (ADMINID)
);
INSERT INTO PKANAKI.ADMIN (ADMINID, PASSWORD) VALUES('admin', 'admin');

/*BRAND TABLE*/
DROP TABLE PKANAKI.BRAND CASCADE CONSTRAINTS;
CREATE TABLE PKANAKI.BRAND
(
  BRANDID VARCHAR2(100) NOT NULL,
  PASSWORD VARCHAR2(100) NOT NULL,
  BRANDNAME VARCHAR2(100) NOT NULL,
  JOINDATE DATE NOT NULL,
  ADDRESS VARCHAR2(100) NOT NULL,
  PRIMARY KEY (BRANDID)
);

/*CUSTOMER TABLE*/
DROP TABLE PKANAKI.CUSTOMER CASCADE CONSTRAINTS;
CREATE TABLE PKANAKI.CUSTOMER
(
  CUSTOMERID VARCHAR2(100) NOT NULL,
  PASSWORD VARCHAR2(100) NOT NULL,
  CUSTOMERNAME VARCHAR2(100) NOT NULL,
  PHONE NUMBER(10) check (PHONE between 1111111111 and 9999999999),
  ADDRESS VARCHAR2(100) NOT NULL,
  PRIMARY KEY (CUSTOMERID)
);

CREATE OR REPLACE FUNCTION PKANAKI.validateLogin(
	INP_USERID  VARCHAR2,
	INP_PASSWORD VARCHAR2
)
RETURN VARCHAR2 
   IS
   isvalid number; 
BEGIN 
	SELECT COUNT(*)  INTO isvalid FROM PKANAKI.CUSTOMER WHERE CUSTOMERID = INP_USERID AND password = INP_PASSWORD;
	IF isvalid > 0 THEN
		RETURN ('1');
	END IF;
	SELECT COUNT(*) AS t INTO isvalid FROM PKANAKI.BRAND WHERE BRANDID = INP_USERID AND password = INP_PASSWORD;
	IF isvalid > 0 THEN
		RETURN ('2');
	END IF;
	SELECT COUNT(*) AS t INTO isvalid FROM PKANAKI.ADMIN WHERE ADMINID = INP_USERID AND password = INP_PASSWORD;
	IF isvalid > 0 THEN
		RETURN ('3');
	END IF;
	RETURN ('0');
END validateLogin;









/* CATEGORY SQL STATEMENTS*/

DROP TABLE PKANAKI.ACTIVITYCATEGORY CASCADE CONSTRAINTS;
CREATE TABLE PKANAKI.ACTIVITYCATEGORY
(
  ACTIVITYCATEGORYCODE VARCHAR2(6) NOT NULL,
  NAME VARCHAR2(100) NOT NULL,
  PRIMARY KEY (ACTIVITYCATEGORYCODE)
);

DROP TABLE PKANAKI.REWARDCATEGORY CASCADE CONSTRAINTS;
CREATE TABLE PKANAKI.REWARDCATEGORY
(
  REWARDCATEGORYCODE VARCHAR2(6) NOT NULL,
  NAME VARCHAR2(100) NOT NULL,
  PRIMARY KEY (REWARDCATEGORYCODE)
);










/* LOYALTY PROGRAM SQL STATEMENTS */


/*LP TABLE*/
DROP TABLE PKANAKI.LP CASCADE CONSTRAINTS;
CREATE TABLE PKANAKI.LP
(
    LOYALTYPROGRAMCODEID VARCHAR2(6) NOT NULL , 
	NAME VARCHAR2(100) NOT NULL , 
	STATE VARCHAR2(100) NOT NULL , 
	BRANDID VARCHAR2(100) NOT NULL UNIQUE, 
	TIER NUMBER(2,0) NOT NULL, 
	PRIMARY KEY (LOYALTYPROGRAMCODEID),
    FOREIGN KEY (BRANDID) REFERENCES PKANAKI.BRAND(BRANDID)
);


/*TIER TABLE*/
DROP TABLE PKANAKI.TIER CASCADE CONSTRAINTS;
CREATE TABLE PKANAKI.TIER
(
  BRANDID VARCHAR2(100) NOT NULL,
  TIERLEVEL NUMBER NOT NULL,
  TIERNAME VARCHAR2(100) NOT NULL,
  POINTSREQUIRED NUMBER NOT NULL,
  MULTIPLIER NUMBER DEFAULT 1 NOT NULL,
  PRIMARY KEY (BRANDID,TIERLEVEL),
  FOREIGN KEY (BRANDID) REFERENCES PKANAKI.LP(BRANDID)
);

/*BRAND_ACTIVITYTYPE TABLE*/
DROP TABLE PKANAKI.BRAND_ACTIVITYTYPE CASCADE CONSTRAINTS;
CREATE TABLE PKANAKI.BRAND_ACTIVITYTYPE
(
  BRANDID VARCHAR2(100) NOT NULL,
  ACTIVITYCATEGORYCODE VARCHAR2(6) NOT NULL,
  PRIMARY KEY (BRANDID,ACTIVITYCATEGORYCODE),
  FOREIGN KEY (BRANDID) REFERENCES PKANAKI.LP(BRANDID),
  FOREIGN KEY (ACTIVITYCATEGORYCODE) REFERENCES PKANAKI.ACTIVITYCATEGORY(ACTIVITYCATEGORYCODE)
);

/*BRAND_REWARDTYPE TABLE*/
DROP TABLE PKANAKI.BRAND_REWARDTYPE CASCADE CONSTRAINTS;
CREATE TABLE PKANAKI.BRAND_REWARDTYPE
(
  BRANDID VARCHAR2(100) NOT NULL,
  REWARDCATEGORYCODE VARCHAR2(6) NOT NULL,
  INSTANCES NUMBER NOT NULL CHECK(INSTANCES >= 0),
  PRIMARY KEY (BRANDID,REWARDCATEGORYCODE),
  FOREIGN KEY (BRANDID) REFERENCES PKANAKI.LP(BRANDID),
  FOREIGN KEY (REWARDCATEGORYCODE) REFERENCES PKANAKI.REWARDCATEGORY(REWARDCATEGORYCODE)
);

/*RE RULE TABLE*/
DROP TABLE  PKANAKI.RERULETABLE;
CREATE TABLE PKANAKI.RERULETABLE
(
  BRANDID VARCHAR2(100) NOT NULL,
  ACTIVITYCATEGORYCODE VARCHAR2(6) NOT NULL,
  POINTS NUMBER DEFAULT 0 NOT NULL,
  VERSION NUMBER DEFAULT 1 NOT NULL,
  PRIMARY KEY (BRANDID,ACTIVITYCATEGORYCODE,VERSION),
  FOREIGN KEY (BRANDID,ACTIVITYCATEGORYCODE) REFERENCES PKANAKI.BRAND_ACTIVITYTYPE(BRANDID,ACTIVITYCATEGORYCODE)
);


/*RR RULE TABLE*/
DROP TABLE  PKANAKI.RRRULETABLE;
CREATE TABLE PKANAKI.RRRULETABLE
(
  BRANDID VARCHAR2(100) NOT NULL,
  REWARDCATEGORYCODE VARCHAR2(6) NOT NULL,
  POINTS NUMBER DEFAULT 0 NOT NULL, 
  INSTANCES NUMBER NOT NULL CHECK(INSTANCES >= 0), 
  VERSION NUMBER DEFAULT 1 NOT NULL,
  PRIMARY KEY (BRANDID,REWARDCATEGORYCODE,VERSION),
  FOREIGN KEY (BRANDID,REWARDCATEGORYCODE) REFERENCES PKANAKI.BRAND_REWARDTYPE(BRANDID,REWARDCATEGORYCODE)
);

/*VALIDATE LP*/
CREATE OR REPLACE FUNCTION PKANAKI.validateLP(
	INP_BRANDID  VARCHAR2
)
RETURN VARCHAR2 
   IS
   isvalid number; 
   isvalid_tier NUMBER;
BEGIN 
	SELECT COUNT(*) INTO isvalid FROM PKANAKI.RERULETABLE WHERE BRANDID = INP_BRANDID;
	IF isvalid <= 0 THEN
		RETURN ('1');
	END IF;
	SELECT COUNT(*)  INTO isvalid FROM PKANAKI.RRRULETABLE WHERE BRANDID = INP_BRANDID ;
	IF isvalid <= 0 THEN
		RETURN ('2');
	END IF;
	SELECT COUNT(*) INTO isvalid FROM PKANAKI.LP WHERE BRANDID = INP_BRANDID AND TIER = 1;
	IF isvalid > 0 THEN
		SELECT COUNT(*) INTO isvalid_tier FROM PKANAKI.TIER WHERE BRANDID = INP_BRANDID;
		IF isvalid_tier <2 THEN
			RETURN ('3');
		END IF;
	END IF;
	RETURN ('0');
END validateLP;









/* CUSTOMER ACTIVITY SQL STATEMENTS */

/*TABLE ENROLLED*/
DROP TABLE PKANAKI.ENROLLED;
CREATE TABLE PKANAKI.ENROLLED
(
    CUSTOMERID VARCHAR2(100) NOT NULL,
	BRANDID VARCHAR2(100) NOT NULL,
	"NAME" VARCHAR2(100) NOT NULL,
	PRIMARY KEY (CUSTOMERID,BRANDID),
    FOREIGN KEY (CUSTOMERID) REFERENCES PKANAKI.CUSTOMER(CUSTOMERID),
    FOREIGN KEY (BRANDID) REFERENCES PKANAKI.LP(BRANDID)
);

/*TABLE WALLET*/
DROP TABLE PKANAKI.WALLET;
CREATE TABLE PKANAKI.WALLET 
(
    CUSTOMERID VARCHAR2(100) NOT NULL,
	BRANDID VARCHAR2(100) NOT NULL,
	POINTSEARNED NUMBER  DEFAULT 0, 
	POINTSREDEEMED NUMBER  DEFAULT 0,
	TIER NUMBER DEFAULT 0,
	MULTIPLIER NUMBER  DEFAULT 1,
    PRIMARY KEY (CUSTOMERID,BRANDID),
    FOREIGN KEY (CUSTOMERID,BRANDID) REFERENCES PKANAKI.ENROLLED(CUSTOMERID,BRANDID)
);

/*TRIGGER WALLET*/
CREATE OR REPLACE TRIGGER PKANAKI.SETWALLET
AFTER INSERT   
 ON PKANAKI.ENROLLED  
FOR EACH ROW
DECLARE  
isvalid number;
M number;
BEGIN  
  	SELECT count(*) INTO isvalid FROM PKANAKI.LP T1 WHERE TIER=0 AND T1.BRANDID = :new.BRANDID;
  	IF isvalid>0 THEN
    	INSERT INTO PKANAKI.WALLET(CUSTOMERID,BRANDID,POINTSEARNED,POINTSREDEEMED,TIER,MULTIPLIER) VALUES(:new.CUSTOMERID,:new.BRANDID,0,0,0,1);
	END IF;
    SELECT count(*) INTO isvalid FROM PKANAKI.LP T1 WHERE TIER=1 AND T1.BRANDID = :new.BRANDID;
   	IF isvalid>0 THEN
   		SELECT COALESCE(MULTIPLIER,1) INTO  M FROM PKANAKI.TIER T1 WHERE T1.BRANDID = :new.BRANDID AND T1.TIERLEVEL = 1;
    	INSERT INTO PKANAKI.WALLET(CUSTOMERID,BRANDID,POINTSEARNED,POINTSREDEEMED,TIER,MULTIPLIER) VALUES(:new.CUSTOMERID,:new.BRANDID,0,0,1,M) ;
	END IF;
END;

/*CUSTOMER LOYALTYACTIVITY*/
CREATE TABLE PKANAKI.LOYALTYACTIVITY
(
	CUSTOMERID VARCHAR2(100) NOT NULL, 
	BRANDID VARCHAR2(100) NOT NULL,
	ACTIVITYCATEGORYCODE VARCHAR2(6) NOT NULL, 
	ACTIVITYDATE DATE NOT NULL,
	POINTSEARNED NUMBER NOT NULL,
    VERSION NUMBER NOT NULL,
    PRIMARY KEY (CUSTOMERID,BRANDID,ACTIVITYCATEGORYCODE,ACTIVITYDATE,VERSION),
    FOREIGN KEY (CUSTOMERID,BRANDID) REFERENCES PKANAKI.ENROLLED(CUSTOMERID,BRANDID),
    FOREIGN KEY (BRANDID,ACTIVITYCATEGORYCODE,VERSION) REFERENCES PKANAKI.RERULETABLE(BRANDID,ACTIVITYCATEGORYCODE,VERSION)
);

/*PROCEDURE INSERT LOYALTYACTIVITY*/
CREATE OR REPLACE PROCEDURE PKANAKI.INSERT_LOYALTYACTIVITY
(
	INP_CUSTOMERID VARCHAR2,
	INP_BRANDID VARCHAR2,
	INP_ACTIVITYCATEGORYCODE VARCHAR2
)
IS
	isvalid NUMBER;
	P NUMBER;
	M NUMBER;
    V NUMBER;
BEGIN
SELECT COALESCE(MULTIPLIER,1) INTO M FROM PKANAKI.WALLET T1 WHERE T1.CUSTOMERID = INP_CUSTOMERID AND T1.BRANDID = INP_BRANDID;
SELECT COALESCE(POINTS,0)*M INTO P FROM PKANAKI.RERULETABLE T1 WHERE T1.BRANDID = INP_BRANDID AND T1.ACTIVITYCATEGORYCODE = INP_ACTIVITYCATEGORYCODE ORDER BY VERSION DESC FETCH NEXT 1 ROWS ONLY;
SELECT COALESCE(VERSION,1) INTO V FROM PKANAKI.RERULETABLE T1 WHERE T1.BRANDID = INP_BRANDID AND T1.ACTIVITYCATEGORYCODE = INP_ACTIVITYCATEGORYCODE ORDER BY VERSION DESC FETCH NEXT 1 ROWS ONLY;
INSERT INTO PKANAKI.LOYALTYACTIVITY (CUSTOMERID, BRANDID, ACTIVITYCATEGORYCODE, ACTIVITYDATE, POINTSEARNED,VERSION) VALUES(INP_CUSTOMERID,INP_BRANDID , INP_ACTIVITYCATEGORYCODE, SYSDATE, P,V);
END;

/*TRIGGER UPDATE WALLET AFTER LOYALTYACTIVITY*/
CREATE OR REPLACE TRIGGER PKANAKI.UPDATEWALLET
AFTER INSERT   
 ON PKANAKI.LOYALTYACTIVITY  
FOR EACH ROW
DECLARE  
isvalid number;
latestpoints NUMBER;
M NUMBER;
TIERL NUMBER;
BEGIN  
	UPDATE PKANAKI.WALLET SET POINTSEARNED = POINTSEARNED + :NEW.POINTSEARNED WHERE CUSTOMERID = :NEW.CUSTOMERID AND BRANDID = :NEW.BRANDID;
	SELECT COUNT(*) INTO isvalid FROM PKANAKI.LP T1 WHERE T1.TIER = '1' AND T1.BRANDID = :NEW.BRANDID;
	IF isvalid > 0 THEN
		SELECT POINTSEARNED INTO latestpoints FROM  PKANAKI.WALLET WHERE CUSTOMERID = :NEW.CUSTOMERID AND BRANDID = :NEW.BRANDID;
		SELECT MULTIPLIER INTO M FROM PKANAKI.TIER T1 WHERE T1.BRANDID=:NEW.BRANDID AND latestpoints >= T1.POINTSREQUIRED  ORDER BY TIERLEVEL DESC FETCH NEXT 1 ROWS ONLY;
		SELECT TIERLEVEL INTO TIERL FROM PKANAKI.TIER T1 WHERE T1.BRANDID=:NEW.BRANDID AND latestpoints >= T1.POINTSREQUIRED  ORDER BY TIERLEVEL DESC FETCH NEXT 1 ROWS ONLY;
		UPDATE PKANAKI.WALLET SET MULTIPLIER = M, TIER = TIERL WHERE CUSTOMERID = :NEW.CUSTOMERID AND BRANDID = :NEW.BRANDID;
	END IF;
END;

/*TABLE REWARDACTIVITY*/
CREATE TABLE PKANAKI.REWARDACTIVITY
(
	CUSTOMERID VARCHAR2(100) NOT NULL, 
	BRANDID VARCHAR2(100) NOT NULL,
	REWARDCATEGORYCODE  VARCHAR2(6) NOT NULL, 
	REWARDDATE DATE NOT NULL,
	POINTSREDEEMED NUMBER NOT NULL,
    VERSION NUMBER NOT NULL,
    PRIMARY KEY (CUSTOMERID,BRANDID,REWARDCATEGORYCODE,REWARDDATE,VERSION),
    FOREIGN KEY (CUSTOMERID,BRANDID) REFERENCES PKANAKI.ENROLLED(CUSTOMERID,BRANDID),
    FOREIGN KEY (BRANDID,REWARDCATEGORYCODE,VERSION) REFERENCES PKANAKI.RRRULETABLE(BRANDID,REWARDCATEGORYCODE,VERSION)
);

CREATE OR REPLACE PROCEDURE PKANAKI.INSERT_REWARDACTIVITY
(
	INP_CUSTOMERID VARCHAR2,
	INP_BRANDID VARCHAR2,
	INP_REWARDCATEGORYCODE VARCHAR2,
	INP_INSTANCES NUMBER
)
IS 
	isvalid NUMBER;
	points_needed NUMBER;
	points_available NUMBER;
    V NUMBER;
BEGIN 
	SELECT INSTANCES into isvalid FROM PKANAKI.RRRULETABLE T1 WHERE T1.BRANDID  = INP_BRANDID AND REWARDCATEGORYCODE = INP_REWARDCATEGORYCODE ORDER BY VERSION DESC FETCH NEXT 1 ROWS ONLY;
    IF isvalid - INP_INSTANCES >= 0 THEN
        SELECT COALESCE(POINTS,0)*INP_INSTANCES INTO points_needed FROM PKANAKI.RRRULETABLE T1 WHERE T1.BRANDID  = INP_BRANDID AND T1.REWARDCATEGORYCODE = INP_REWARDCATEGORYCODE ORDER BY VERSION DESC FETCH NEXT 1 ROWS ONLY;
        SELECT (POINTSEARNED-POINTSREDEEMED) INTO points_available FROM PKANAKI.WALLET WHERE BRANDID  = INP_BRANDID  AND CUSTOMERID  = INP_CUSTOMERID ;
         IF points_available >= points_needed THEN
            SELECT VERSION INTO V FROM PKANAKI.RRRULETABLE T1 WHERE T1.BRANDID  = INP_BRANDID AND T1.REWARDCATEGORYCODE = INP_REWARDCATEGORYCODE ORDER BY VERSION DESC FETCH NEXT 1 ROWS ONLY;
            INSERT INTO PKANAKI.REWARDACTIVITY (CUSTOMERID, BRANDID, REWARDCATEGORYCODE, REWARDDATE, POINTSREDEEMED,VERSION) VALUES(INP_CUSTOMERID,INP_BRANDID , INP_REWARDCATEGORYCODE, SYSDATE, points_needed,V);
            UPDATE PKANAKI.WALLET SET POINTSREDEEMED = POINTSREDEEMED + points_needed WHERE BRANDID  = INP_BRANDID  AND CUSTOMERID  = INP_CUSTOMERID ;
            UPDATE PKANAKI.RRRULETABLE SET INSTANCES = INSTANCES - INP_INSTANCES WHERE BRANDID  = INP_BRANDID AND REWARDCATEGORYCODE = INP_REWARDCATEGORYCODE  AND VERSION = V;
    	END IF;
    END IF;
END;



/*2 PROCEDURES USED FOR GERATING SAMPLE DATA*/
CREATE OR REPLACE PROCEDURE PKANAKI.INSERT_SAMPLE_LOYALTYACTIVITY
(
	INP_CUSTOMERID VARCHAR2,
	INP_BRANDID VARCHAR2,
	INP_ACTIVITYCATEGORYCODE VARCHAR2,
	INP_SAMPLEDATETIME VARCHAR2,
	INP_FORMAT VARCHAR2
)
IS
	isvalid NUMBER;
	P NUMBER;
	M NUMBER;
    V NUMBER;
BEGIN
SELECT COALESCE(MULTIPLIER,1) INTO M FROM PKANAKI.WALLET T1 WHERE T1.CUSTOMERID = INP_CUSTOMERID AND T1.BRANDID = INP_BRANDID;
SELECT COALESCE(POINTS,0)*M INTO P FROM PKANAKI.RERULETABLE T1 WHERE T1.BRANDID = INP_BRANDID AND T1.ACTIVITYCATEGORYCODE = INP_ACTIVITYCATEGORYCODE ORDER BY VERSION DESC FETCH NEXT 1 ROWS ONLY;
SELECT COALESCE(VERSION,1) INTO V FROM PKANAKI.RERULETABLE T1 WHERE T1.BRANDID = INP_BRANDID AND T1.ACTIVITYCATEGORYCODE = INP_ACTIVITYCATEGORYCODE ORDER BY VERSION DESC FETCH NEXT 1 ROWS ONLY;
INSERT INTO PKANAKI.LOYALTYACTIVITY (CUSTOMERID, BRANDID, ACTIVITYCATEGORYCODE, ACTIVITYDATE, POINTSEARNED,VERSION) VALUES(INP_CUSTOMERID,INP_BRANDID , INP_ACTIVITYCATEGORYCODE, TO_DATE(INP_SAMPLEDATETIME,INP_FORMAT), P,V);
END;


CREATE OR REPLACE PROCEDURE PKANAKI.INSERT_SAMPLE_REWARDACTIVITY
(
	INP_CUSTOMERID VARCHAR2,
	INP_BRANDID VARCHAR2,
	INP_REWARDCATEGORYCODE VARCHAR2,
	INP_INSTANCES NUMBER,
    INP_SAMPLEDATETIME VARCHAR2,
	INP_FORMAT VARCHAR2
)
IS 
	isvalid NUMBER;
	points_needed NUMBER;
	points_available NUMBER;
    V NUMBER;
BEGIN 
	SELECT INSTANCES into isvalid FROM PKANAKI.RRRULETABLE T1 WHERE T1.BRANDID  = INP_BRANDID AND REWARDCATEGORYCODE = INP_REWARDCATEGORYCODE ORDER BY VERSION DESC FETCH NEXT 1 ROWS ONLY;
    IF isvalid - INP_INSTANCES >= 0 THEN
        SELECT COALESCE(POINTS,0)*INP_INSTANCES INTO points_needed FROM PKANAKI.RRRULETABLE T1 WHERE T1.BRANDID  = INP_BRANDID AND T1.REWARDCATEGORYCODE = INP_REWARDCATEGORYCODE ORDER BY VERSION DESC FETCH NEXT 1 ROWS ONLY;
        SELECT (POINTSEARNED-POINTSREDEEMED) INTO points_available FROM PKANAKI.WALLET WHERE BRANDID  = INP_BRANDID  AND CUSTOMERID  = INP_CUSTOMERID ;
         IF points_available >= points_needed THEN
            SELECT VERSION INTO V FROM PKANAKI.RRRULETABLE T1 WHERE T1.BRANDID  = INP_BRANDID AND T1.REWARDCATEGORYCODE = INP_REWARDCATEGORYCODE ORDER BY VERSION DESC FETCH NEXT 1 ROWS ONLY;
            INSERT INTO PKANAKI.REWARDACTIVITY (CUSTOMERID, BRANDID, REWARDCATEGORYCODE, REWARDDATE, POINTSREDEEMED,VERSION) VALUES(INP_CUSTOMERID,INP_BRANDID , INP_REWARDCATEGORYCODE, TO_DATE(INP_SAMPLEDATETIME,INP_FORMAT), points_needed,V);
            UPDATE PKANAKI.WALLET SET POINTSREDEEMED = POINTSREDEEMED + points_needed WHERE BRANDID  = INP_BRANDID  AND CUSTOMERID  = INP_CUSTOMERID ;
            UPDATE PKANAKI.RRRULETABLE SET INSTANCES = INSTANCES - INP_INSTANCES WHERE BRANDID  = INP_BRANDID AND REWARDCATEGORYCODE = INP_REWARDCATEGORYCODE  AND VERSION = V;
    	END IF;
    END IF;
END;